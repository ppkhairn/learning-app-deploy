AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS with Fargate, ECR, and ALB using an existing VPC'

Parameters:
  ECRRepositoryName:
    Type: String
    Default: my-ecr-repo
    Description: The name of the ECR repository to store Docker images.
  
  ImageTagDeploy:
    Type: String
    Default: <Should come from pyproject.toml version>
    Description: The tag of the docker image in the ECR repository for deployment.

  ECSClusterName:
    Type: String
    Default: my-ecs-cluster
    Description: The name of the ECS cluster.

  ECSServiceName:
    Type: String
    Default: my-ecs-service
    Description: The name of the ECS service.

  TaskDefinitionFamily:
    Type: String
    Default: my-task-definition-family
    Description: The family name for ECS Task Definition.

  ALBName:
    Type: String
    Default: my-alb
    Description: The name of the Application Load Balancer.

  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of an existing VPC.

  PublicSubnet1CIDR:
    Type: String
    Default: 172.31.96.0/24
    Description: CIDR block for public subnet 1.

  PublicSubnet2CIDR:
    Type: String
    Default: 172.31.97.0/24
    Description: CIDR block for public subnet 2.

  PrivateSubnet1CIDR:
    Type: String
    Default: 172.31.98.0/24
    Description: CIDR block for private subnet 1.

  PrivateSubnet2CIDR:
    Type: String
    Default: 172.31.99.0/24
    Description: CIDR block for private subnet 2.

  ALBSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The existing security group for ALB.
  
  ECSSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The existing security group for ECS tasks.

  InternetGatewayId:
    Type: AWS::EC2::InternetGateway::Id
    Description: The ID of an existing internet gateway.

Resources:

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ''] # Select the first AZ

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ''] # Select the first AZ

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ''] # Select the first AZ

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [0, !GetAZs ''] # Select the first AZ

  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway

  # VPCGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties:
  #     VpcId: !Ref VPCId
  #     InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCId

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: igw-0cc13fcf28cb04f51 #!Ref InternetGatewayId

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatGatewayEIP.AllocationId

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCId

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBName
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroupId
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group
      VpcId: !Ref VPCId
      Protocol: HTTP
      Port: 8080
      TargetType: ip  # Required for Fargate
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup # FIXED
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: HTTP

  ECSFargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref TaskDefinitionFamily
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSServiceExecutionRole.Arn
      ContainerDefinitions:
        - Name: my-container
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryName}:${ImageTagDeploy}'
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp

  ECSServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ECSServiceExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSServiceExecutionRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALB
      - ALBListener
      - ALBTargetGroup
      - PrivateRoute
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSFargateTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED # Place ECS tasks in private subnets
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroupId
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: my-container
          ContainerPort: 8080

Outputs:
  ECSServiceUrl:
    Value: !Sub 'http://${ALB.DNSName}'
    Description: 'URL of the ECS service behind the load balancer.'
