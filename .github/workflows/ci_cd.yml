# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to ECS with CloudFormation

on:
  push:
    branches:
      - main  # Triggers on push to the "main" branch

env:
  # AWS_REGION: us-east-1                      # Set this to your AWS region
  # ECR_REPOSITORY: my-ecr-repository          # Set this to your ECR repository name
  STACK_NAME: my-ecs-stack  
  MIN_IMGS_KEEP: 2                 # Set this to your CloudFormation stack name
  # CLOUDFORMATION_TEMPLATE: cloudformation/ecs-cloudformation-template.yaml  # Path to your CloudFormation template

jobs:
  deploy:
    name: Deploy to ECS with CloudFormation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # - name: Set up Python
    #   uses: actions/setup-python@v2
    #   with:
    #     python-version: '3.9'  # Choose the Python version

    # - name: Install dependencies with Poetry
    #   run: |
    #     curl -sSL https://install.python-poetry.org | python3 -
    #     poetry install --no-root
    
    # - name: Verify Poetry installation
    #   run: |
    #     poetry --version

    # - name: Check directory structure
    #   run: |
    #     ls -R

    # - name: Set PYTHONPATH
    #   run: |
    #     export PYTHONPATH=$(pwd)/src:$PYTHONPATH
    
    # - name: Check PYTHONPATH
    #   run: |
    #     echo "PYTHONPATH is set to: $PYTHONPATH"
    #     echo "Contents of $(pwd)/src:"
    #     ls -R $(pwd)/src

    # - name: Run pytest
    #   run: |
    #     echo "PWD = $(pwd)"
    #     export PYTHONPATH=$(pwd)/src:$PYTHONPATH
    #     poetry run pytest tests/ --maxfail=1 --disable-warnings -q # You can adjust pytest options here

    - name: Extract version from pyproject.toml
      id: extract-version
      run: |
        VERSION=$(grep -oP '(?<=version = ")[^"]*' pyproject.toml)
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get the latest tag from ECR
      id: get-latest-tag
      env:
        ECR_REPOSITORY: ${{ secrets.AWS_ECR }}
      run: |
        # Fetch all image tags from ECR
        EXISTING_TAGS=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'imageDetails[*].imageTags' --output json | jq -r '.[] | select(.!=null) | .[]' | sort -V | tail -n1)

        if [[ -z "$EXISTING_TAGS" ]]; then
          echo "No existing images found. Proceeding with the first tag."
          echo "latest_tag=0.0.0" >> $GITHUB_ENV
        else
          echo "Latest tag found: $EXISTING_TAGS"
          echo "latest_tag=$EXISTING_TAGS" >> $GITHUB_ENV
        fi

    - name: Compare new tag with the latest tag in ECR
      id: compare-tags
      env:
        NEW_TAG: ${{ env.VERSION }}  # Extracted from pyproject.toml
        LATEST_TAG: ${{ env.latest_tag }}
      run: |
        # Compare versions using Python
        compare_result=$(python3 -c "from packaging import version; print(version.parse('$NEW_TAG') > version.parse('$LATEST_TAG'))")

        if [[ "$compare_result" == "True" ]]; then
          echo "New tag ($NEW_TAG) is greater than the latest tag ($LATEST_TAG). Proceeding."
          echo "new_tag_valid=true" >> $GITHUB_ENV
        else
          echo "New tag ($NEW_TAG) is NOT greater than the latest tag ($LATEST_TAG). Exiting."
          echo "new_tag_valid=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Cleanup Old Images in ECR (Keep Latest 10)
      env:
        ECR_REPOSITORY: ${{ secrets.AWS_ECR }}
      run: |
        # Fetch image details sorted by pushed time (descending)
        IMAGE_DETAILS=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --query 'imageDetails | sort_by(@, &imagePushedAt) | reverse(@)' --output json)
        
        # Extract image digests, keeping only the latest 10
        IMAGE_DIGESTS=$(echo $IMAGE_DETAILS | jq -r '.[${{ env.MIN_IMGS_KEEP }}:] | .[].imageDigest')

        if [[ -z "$IMAGE_DIGESTS" ]]; then
          echo "No old images to delete. Exiting."
          exit 0
        fi

        echo "Deleting old images from ECR..."
        for DIGEST in $IMAGE_DIGESTS; do
          echo "Deleting image with digest: $DIGEST"
          aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$DIGEST
        done
        echo "Cleanup complete!"

    - name: Build, tag, and push Docker image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}   # Registry URL from login
        ECR_REPOSITORY: ${{ secrets.AWS_ECR }} 
        IMAGE_TAG: ${{ env.VERSION }}
      run: |
        # Build and push Docker image to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Deploy CloudFormation stack for ECS update
    #   uses: aws-actions/aws-cloudformation-create-stack@v1
    #   with:
    #     stack-name: ${{ env.STACK_NAME }}
    #     template-body: file://${{ env.CLOUDFORMATION_TEMPLATE }}
    #     capabilities: CAPABILITY_NAMED_IAM
